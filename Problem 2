#include <iostream>
#include <string>
using namespace std;

// Function to expand around the center and return the length of the palindrome
int expandAroundCenter(const string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        left--;
        right++;
    }
    // Return the length of the palindrome
    return right - left - 1;
}

// Function to find the longest palindromic substring
string longestPalindromicSubstring(const string& s) {
    if (s.empty()) return "";

    int start = 0, maxLength = 0;

    for (int i = 0; i < s.size(); i++) {
        // Odd-length palindrome (single character center)
        int len1 = expandAroundCenter(s, i, i);

        // Even-length palindrome (two-character center)
        int len2 = expandAroundCenter(s, i, i + 1);

        // Get the maximum length from the two cases
        int len = max(len1, len2);

        // Update the start and maxLength if a longer palindrome is found
        if (len > maxLength) {
            maxLength = len;
            start = i - (len - 1) / 2;
        }
    }

    // Extract the longest palindromic substring
    return s.substr(start, maxLength);
}

int main() {
    string s;

    // Input the string
    cout << "Enter the string: ";
    cin >> s;

    // Find and print the longest palindromic substring
    string result = longestPalindromicSubstring(s);
    cout << "The longest palindromic substring is: " << result << endl;

    return 0;
}
