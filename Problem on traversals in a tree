#include <iostream>
#include <queue>
using namespace std;

// Node structure for a binary tree
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Binary Tree Class
class BinaryTree {
public:
    Node* root;

    BinaryTree() : root(nullptr) {}

    // Inorder Traversal (Left, Root, Right)
    void inorderTraversal(Node* node) {
        if (!node) return;

        inorderTraversal(node->left);  // Visit left subtree
        cout << node->data << " ";    // Visit root
        inorderTraversal(node->right); // Visit right subtree
    }

    // Preorder Traversal (Root, Left, Right)
    void preorderTraversal(Node* node) {
        if (!node) return;

        cout << node->data << " ";    // Visit root
        preorderTraversal(node->left);  // Visit left subtree
        preorderTraversal(node->right); // Visit right subtree
    }

    // Postorder Traversal (Left, Right, Root)
    void postorderTraversal(Node* node) {
        if (!node) return;

        postorderTraversal(node->left);  // Visit left subtree
        postorderTraversal(node->right); // Visit right subtree
        cout << node->data << " ";       // Visit root
    }

    // Level-order Traversal (Breadth-First)
    void levelOrderTraversal(Node* root) {
        if (!root) return;

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* current = q.front();
            q.pop();

            cout << current->data << " "; // Visit the node

            if (current->left) q.push(current->left);  // Add left child to queue
            if (current->right) q.push(current->right); // Add right child to queue
        }
    }

    // Function to insert nodes in the binary tree for demonstration
    Node* insert(Node* node, int data) {
        if (!node) return new Node(data);

        if (data <= node->data)
            node->left = insert(node->left, data);
        else
            node->right = insert(node->right, data);

        return node;
    }
};

int main() {
    BinaryTree tree;

    // Building the binary tree
    tree.root = tree.insert(tree.root, 10);
    tree.insert(tree.root, 5);
    tree.insert(tree.root, 15);
    tree.insert(tree.root, 3);
    tree.insert(tree.root, 7);
    tree.insert(tree.root, 12);
    tree.insert(tree.root, 18);

    cout << "Inorder Traversal (Left, Root, Right): ";
    tree.inorderTraversal(tree.root);
    cout << endl;

    cout << "Preorder Traversal (Root, Left, Right): ";
    tree.preorderTraversal(tree.root);
    cout << endl;

    cout << "Postorder Traversal (Left, Right, Root): ";
    tree.postorderTraversal(tree.root);
    cout << endl;

    cout << "Level-order Traversal (Breadth-First): ";
    tree.levelOrderTraversal(tree.root);
    cout << endl;

    return 0;
}
