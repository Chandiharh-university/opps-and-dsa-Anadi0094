#include <iostream>
#include <queue>
#include <cmath>
using namespace std;

// Node structure for all trees
struct Node {
    int data;
    Node* left;
    Node* right;
    int height; // Used for AVL Trees

    Node(int val) : data(val), left(nullptr), right(nullptr), height(1) {}
};

// Binary Tree Class
class BinaryTree {
public:
    Node* root;

    BinaryTree() : root(nullptr) {}

    Node* insertBinaryTree(Node* node, int data) {
        if (!node) return new Node(data);

        // Insert data to left or right randomly
        if (rand() % 2) node->left = insertBinaryTree(node->left, data);
        else node->right = insertBinaryTree(node->right, data);

        return node;
    }

    void levelOrderTraversal(Node* root) {
        if (!root) return;

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* temp = q.front();
            q.pop();
            cout << temp->data << " ";

            if (temp->left) q.push(temp->left);
            if (temp->right) q.push(temp->right);
        }
    }
};

// Binary Search Tree Class
class BinarySearchTree {
public:
    Node* root;

    BinarySearchTree() : root(nullptr) {}

    Node* insertBST(Node* node, int data) {
        if (!node) return new Node(data);

        if (data < node->data) node->left = insertBST(node->left, data);
        else node->right = insertBST(node->right, data);

        return node;
    }

    void inOrderTraversal(Node* root) {
        if (!root) return;

        inOrderTraversal(root->left);
        cout << root->data << " ";
        inOrderTraversal(root->right);
    }
};

// AVL Tree Class
class AVLTree {
public:
    Node* root;

    AVLTree() : root(nullptr) {}

    int getHeight(Node* node) {
        return node ? node->height : 0;
    }

    int getBalanceFactor(Node* node) {
        return node ? getHeight(node->left) - getHeight(node->right) : 0;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T = x->right;

        x->right = y;
        y->left = T;

        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T = y->left;

        y->left = x;
        x->right = T;

        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y;
    }

    Node* insertAVL(Node* node, int data) {
        if (!node) return new Node(data);

        if (data < node->data)
            node->left = insertAVL(node->left, data);
        else if (data > node->data)
            node->right = insertAVL(node->right, data);
        else
            return node; // Duplicates are not allowed

        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        int balance = getBalanceFactor(node);

        // Rotations to maintain balance
        if (balance > 1 && data < node->left->data)
            return rightRotate(node);
        if (balance < -1 && data > node->right->data)
            return leftRotate(node);
        if (balance > 1 && data > node->left->data) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && data < node->right->data) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    void inOrderTraversal(Node* root) {
        if (!root) return;

        inOrderTraversal(root->left);
        cout << root->data << " ";
        inOrderTraversal(root->right);
    }
};

// Main Function to Demonstrate Trees
int main() {
    // Binary Tree Demonstration
    BinaryTree binaryTree;
    binaryTree.root = binaryTree.insertBinaryTree(binaryTree.root, 10);
    binaryTree.insertBinaryTree(binaryTree.root, 20);
    binaryTree.insertBinaryTree(binaryTree.root, 30);
    binaryTree.insertBinaryTree(binaryTree.root, 40);

    cout << "Binary Tree (Level Order): ";
    binaryTree.levelOrderTraversal(binaryTree.root);
    cout << endl;

    // Binary Search Tree Demonstration
    BinarySearchTree bst;
    bst.root = bst.insertBST(bst.root, 30);
    bst.insertBST(bst.root, 20);
    bst.insertBST(bst.root, 40);
    bst.insertBST(bst.root, 10);

    cout << "Binary Search Tree (In-order): ";
    bst.inOrderTraversal(bst.root);
    cout << endl;

    // AVL Tree Demonstration
    AVLTree avlTree;
    avlTree.root = avlTree.insertAVL(avlTree.root, 30);
    avlTree.insertAVL(avlTree.root, 20);
    avlTree.insertAVL(avlTree.root, 40);
    avlTree.insertAVL(avlTree.root, 10);

    cout << "AVL Tree (In-order): ";
    avlTree.inOrderTraversal(avlTree.root);
    cout << endl;

    return 0;
}
